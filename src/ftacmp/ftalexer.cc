#line 2 "ftalexer.cc"

#line 4 "ftalexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer FtaParser_create_buffer
#define yy_delete_buffer FtaParser_delete_buffer
#define yy_flex_debug FtaParser_flex_debug
#define yy_init_buffer FtaParser_init_buffer
#define yy_flush_buffer FtaParser_flush_buffer
#define yy_load_buffer_state FtaParser_load_buffer_state
#define yy_switch_to_buffer FtaParser_switch_to_buffer
#define yyin FtaParserin
#define yyleng FtaParserleng
#define yylex FtaParserlex
#define yylineno FtaParserlineno
#define yyout FtaParserout
#define yyrestart FtaParserrestart
#define yytext FtaParsertext
#define yywrap FtaParserwrap
#define yyalloc FtaParseralloc
#define yyrealloc FtaParserrealloc
#define yyfree FtaParserfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE FtaParserrestart(FtaParserin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t FtaParserleng;

extern FILE *FtaParserin, *FtaParserout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up FtaParsertext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up FtaParsertext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via FtaParserrestart()), so that the user can continue scanning by
	 * just pointing FtaParserin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when FtaParsertext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t FtaParserleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow FtaParserwrap()'s to do buffer switches
 * instead of setting up a fresh FtaParserin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void FtaParserrestart (FILE *input_file  );
void FtaParser_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE FtaParser_create_buffer (FILE *file,int size  );
void FtaParser_delete_buffer (YY_BUFFER_STATE b  );
void FtaParser_flush_buffer (YY_BUFFER_STATE b  );
void FtaParserpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void FtaParserpop_buffer_state (void );

static void FtaParserensure_buffer_stack (void );
static void FtaParser_load_buffer_state (void );
static void FtaParser_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER FtaParser_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE FtaParser_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE FtaParser_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE FtaParser_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *FtaParseralloc (yy_size_t  );
void *FtaParserrealloc (void *,yy_size_t  );
void FtaParserfree (void *  );

#define yy_new_buffer FtaParser_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        FtaParserensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            FtaParser_create_buffer(FtaParserin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        FtaParserensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            FtaParser_create_buffer(FtaParserin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define FtaParserwrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *FtaParserin = (FILE *) 0, *FtaParserout = (FILE *) 0;

typedef int yy_state_type;

extern int FtaParserlineno;

int FtaParserlineno = 1;

extern char *FtaParsertext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr FtaParsertext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up FtaParsertext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	FtaParserleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 87
#define YY_END_OF_BUFFER 88
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[692] =
    {   0,
        0,    0,   88,   86,   83,   82,   68,   86,   69,   68,
       68,   72,   59,   64,   62,   65,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   47,   48,   70,   83,   82,    0,   81,   80,
        0,   76,    0,   75,   72,    0,    0,   60,   66,   63,
       67,   61,   71,   71,   27,   71,   71,   71,   10,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   28,   71,   28,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   30,   71,   30,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   28,
       71,   71,   71,   71,   71,   30,   71,   71,   71,   71,
       71,   71,   71,   71,   71,    0,   84,    0,    0,   85,
       75,    0,    0,   77,   73,    1,    5,    1,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   52,   71,   71,   71,   71,   71,   41,   71,   71,

       71,   71,   71,   71,   71,   71,   71,    7,   71,    6,
       71,   29,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,    8,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,    1,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,    0,   79,
        0,   78,   74,   71,   71,   71,   71,   71,   20,   71,
       71,   71,   71,   71,   71,   71,   11,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   42,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   33,   71,   71,
       71,   71,   34,   71,   38,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,    9,   71,   71,   71,   39,
       71,   71,   71,   18,   18,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   35,   71,   71,   71,   71,   71,
       46,   71,   71,   71,   71,   71,   71,   36,   71,   71,
       71,   71,   71,   49,   71,   71,   71,   32,   71,   71,

       71,   71,   71,   71,   71,   18,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   45,   56,   71,   71,   71,   71,   26,
       71,   71,   43,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   19,   71,   31,   51,   71,   71,
       31,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,    3,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   40,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,    2,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   44,   71,   71,   71,
       54,   71,   71,   50,   71,   71,   71,   71,   71,   71,
       71,   71,   71,    4,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   37,   37,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   37,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   12,   71,

       71,   71,   13,   71,   71,   71,   57,   22,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   24,
       71,   71,   71,   71,   17,   71,   71,   71,   71,   71,
       71,   71,   71,   53,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   25,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       23,   21,   71,   71,   55,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   16,   71,
       71,   15,   71,   71,   71,   71,   14,   71,   71,   58,
        0

    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    1,    4,    4,    4,    4,    5,    4,
        4,    4,    6,    4,    7,    8,    9,   10,   10,   10,
       10,   10,   10,   11,   10,   10,   10,    4,   12,   13,
       14,   15,    1,    4,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
        4,    1,    4,    1,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   41,   53,   54,   55,
       56,   57,   41,   58,   59,   60,   61,   62,   63,   64,
       65,   41,   66,    4,   67,   68,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    1,    1,    1
    } ;

static yyconst flex_uint16_t yy_base[697] =
    {   0,
        0,    0,  814,  815,  811,    0,  815,   66,  805,   62,
      802,   66,  815,   65,  815,   67,   55,   30,   63,  790,
        0,   72,   42,   78,   54,   81,  102,   73,   75,   99,
      101,  107,  123,  780,  121,   82,   96,  743,  106,   90,
      749,  763,  750,  757,  118,  747,  102,   84,  119,  752,
      127,  745,  815,  815,  815,  798,    0,  169,  815,  815,
      796,  165,  795,  168,  173,  180,  770,  815,  815,  815,
      815,  815,    0,  777,    0,  773,  748,  744,    0,   67,
      756,  774,  142,  729,  745,  767,  760,  172,  756,  769,
      731,  727,  752,  725,  743,  740,  716,  748,  159,  721,

      754,  754,  725,  733,  738,  741,  705,  710,  712,  731,
      705,  744,  721,  727,  719,  700,  726,  728,  735,  729,
      706,  701,  726,  736,  718,  177,  697,  157,  732,  732,
      719,  710,  702,  713,  708,  722,  681,  693,  706,  680,
      691,  687,  150,  674,  690,  680,  676,  675,  668,  674,
      680,  663,  668,  670,  664,  681,  662,  672,  667,  666,
      159,  675,  657,  669,  657,  711,  815,  212,  710,  815,
      214,  220,  218,  222,  685,  669,    0,  668,  693,  674,
      678,  686,  662,  645,  648,  655,  677,  666,  672,  663,
      669,    0,  636,  641,  658,  632,  668,    0,  640,  670,

      678,  651,  676,  639,  650,  645,  623,    0,  660,    0,
      632,    0,  647,  663,  658,  661,  629,  659,  639,  650,
      645,  621,  617,  649,  650,  647,  634,  642,    0,  644,
      616,  612,  614,  633,  624,  638,  637,  596,  639,  636,
      620,  607,  593,  608,  607,  606,  604,  587,  590,  597,
      583,  588,  580,  589,  592,  578,  588,  593,  588,  584,
      580,  585,  581,  583,  569,  583,  569,  584,  225,  227,
      229,  231,  815,  609,  608,  594,  598,  586,    0,  565,
      568,  558,  588,  596,  596,  594,    0,  566,  581,  554,
      581,  554,  575,  565,  590,  563,  546,  561,    0,  560,

      581,  553,  583,  576,  564,  547,  537,  566,  563,  557,
      555,  530,  528,  570,  561,  570,  549,    0,  551,  538,
      524,  561,    0,  543,    0,  561,  555,  557,  526,  528,
      558,  557,  529,  516,  519,  509,  521,  510,  511,  507,
      522,  516,  513,  503,  500,  498,  513,  499,  506,  508,
      511,  531,  503,  527,  521,    0,  498,  493,  527,    0,
      512,  512,  486,  519,  491,  519,  491,  497,  501,  510,
      499,  493,  504,  503,    0,  497,  509,  488,  480,  486,
        0,  509,  484,  494,  482,  466,  487,    0,  493,  500,
      497,  458,  468,    0,  500,  489,  487,    0,  460,  490,

      462,  461,  458,  453,  449,  455,  456,  462,  447,  453,
      459,  458,  442,  438,  448,  443,  446,  472,  444,  463,
      469,  435,  440,    0,    0,  446,  445,  457,  430,    0,
      459,  467,    0,  466,  456,  444,  418,  448,  444,  451,
      417,  449,  443,  442,    0,  441,  446,    0,  436,  435,
        0,  409,  439,  423,  440,  412,  440,  412,  411,  404,
      409,  415,  401,  403,  393,  395,  400,  395,  392,  398,
      399,  414,  388,  423,  402,  394,  400,  416,  415,  417,
      389,  407,  409,  408,  378,  398,  372,  398,    0,  400,
      373,  401,  391,  365,  395,  400,  393,  366,    0,  400,

      386,  360,  385,  359,  358,  366,  372,  361,  363,  355,
      350,  353,  347,  351,  347,  347,    0,  362,  365,  360,
      363,  370,  343,  356,  355,  372,    0,  344,  374,  346,
      350,  367,  339,    0,  354,  328,  358,  366,  349,  323,
      365,  347,  321,    0,  338,  316,  322,  335,  325,  328,
      323,  313,  311,  311,  165,  347,  226,  319,  344,  316,
      332,  331,  335,  308,  329,  303,  323,  330,  303,  337,
      309,  313,  320,  322,  295,  322,  308,  307,  200,  298,
      296,  287,  290,  286,  288,  295,  284,  298,  299,  315,
      317,  271,  285,  287,  304,  277,  311,  283,    0,  287,

      286,  303,    0,  293,  267,  293,    0,    0,  289,  297,
      296,  255,  269,  271,  262,  269,   49,   62,   98,    0,
      180,  178,  163,  162,    0,  210,  186,  222,  223,  229,
      208,  209,  216,    0,  223,  198,  208,  201,  197,  206,
      217,  204,  233,    0,  210,  232,  208,  238,  213,  232,
      246,  247,  239,  250,  224,  221,  218,  222,  227,  229,
        0,    0,  257,  231,    0,  253,  228,  262,  257,  232,
      237,  233,  235,  262,  237,  269,  243,  276,    0,  241,
      246,    0,  269,  244,  270,  246,    0,  264,  274,    0,
      815,  303,  306,  302,  309,  312

    } ;

static yyconst flex_int16_t yy_def[697] =
    {   0,
      691,    1,  691,  691,  691,  692,  691,  693,  691,  691,
      691,  691,  691,  691,  691,  691,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  691,  691,  691,  691,  692,  693,  691,  691,
      695,  691,  696,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  695,  691,  691,  696,  691,
      691,  691,  691,  691,  691,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  691,  691,
      691,  691,  691,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,

      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
        0,  691,  691,  691,  691,  691

    } ;

static yyconst flex_uint16_t yy_nxt[884] =
    {   0,
        4,    5,    6,    7,    8,    7,    9,   10,   11,   12,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   21,   21,   26,   27,   28,   29,
       30,   21,   31,   32,   33,   34,   21,   35,   36,   21,
       21,   21,   37,   38,   39,   21,   21,   40,   41,   42,
       43,   21,   44,   45,   46,   47,   21,   48,   49,   50,
       21,   21,   51,   52,   21,   53,   54,   55,   59,   79,
       60,   62,   62,   64,   93,   65,   65,   68,   69,   70,
       71,   72,   98,   74,   99,   66,  179,   87,   75,   80,
      640,   76,   81,   95,   79,   88,  180,   96,   82,   94,

      101,   67,  110,  102,   89,  112,   90,  113,  100,   77,
      114,  139,   66,   75,  117,   83,   78,  104,   84,  641,
       97,  105,   91,   85,  119,  106,  123,  103,  111,   92,
      120,  118,  115,  124,  158,  116,  135,  140,  129,  159,
      146,  125,  126,  136,  107,  130,  131,  147,  108,  642,
      141,  121,  109,  127,   75,  132,  122,  142,  143,  156,
      152,  144,  157,  137,  153,  160,  145,  128,  154,  163,
      138,   59,  133,   60,   62,   62,  164,  171,  171,  161,
       64,  589,   65,   65,  168,  173,  173,  172,  183,  174,
      174,  189,   66,  227,  228,  201,  247,  184,  190,  643,

      202,  232,  590,  263,  229,  248,  644,  230,   67,  645,
      229,  168,  229,  233,  172,  264,  644,  269,  269,   66,
      203,  270,  270,  171,  171,  271,  271,  174,  174,  272,
      272,  174,  174,  172,  270,  270,  270,  270,  272,  272,
      272,  272,  592,  612,  646,  647,  648,  649,  650,  651,
      652,  653,  654,  655,  656,  644,  657,  658,  659,  660,
      172,  661,  613,  593,  661,  662,  662,  663,  664,  665,
      666,  667,  668,  669,  670,  661,  662,  671,  672,  673,
      674,  675,  676,  677,  678,  679,  679,  680,  681,  679,
      682,  682,  683,  684,  685,  682,  686,  687,  687,  688,

      687,  689,  690,   57,   73,   57,   58,   58,   58,  166,
      166,  166,  169,  169,  169,  639,  625,  638,  637,  620,
      636,  635,  634,  633,  632,  631,  630,  629,  628,  627,
      626,  625,  625,  624,  623,  620,  622,  621,  620,  619,
      608,  618,  603,  617,  599,  616,  615,  614,  611,  610,
      609,  608,  608,  607,  606,  605,  604,  603,  603,  602,
      601,  600,  599,  599,  598,  597,  596,  595,  594,  591,
      588,  587,  586,  585,  584,  583,  582,  581,  580,  579,
      578,  577,  576,  575,  574,  573,  572,  571,  570,  569,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,

      558,  557,  556,  555,  544,  554,  553,  552,  551,  550,
      549,  548,  547,  546,  545,  517,  544,  544,  543,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  527,  526,  525,  524,  523,
      522,  521,  520,  519,  518,  517,  517,  516,  515,  514,
      513,  512,  489,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  499,  498,  497,  496,  495,
      494,  493,  492,  491,  489,  490,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  451,  445,  468,

      467,  466,  465,  464,  430,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  451,  450,  449,
      448,  447,  445,  446,  445,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,
      430,  429,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  398,  416,  415,  414,  413,  412,
      411,  410,  375,  409,  408,  407,  406,  405,  356,  404,
      403,  402,  401,  400,  398,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  378,  377,  376,  375,

      375,  374,  373,  372,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  356,  358,  357,
      356,  355,  354,  353,  352,  351,  350,  349,  323,  348,
      318,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  287,  337,  279,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  323,  325,  324,  323,  322,
      321,  318,  320,  319,  318,  317,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  295,  294,  293,
      292,  291,  290,  289,  287,  288,  287,  286,  285,  284,

      283,  279,  282,  281,  280,  279,  278,  277,  276,  275,
      274,  273,  170,  167,  268,  267,  266,  265,  262,  261,
      260,  259,  258,  212,  210,  257,  208,  256,  255,  254,
      253,  252,  251,  250,  249,  177,  246,  245,  244,  243,
      242,  241,  240,  239,  238,  237,  236,  235,  234,  231,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  212,  210,  211,  208,  210,
      209,  208,  207,  206,  205,  204,  200,  199,  198,  197,
      196,  195,  194,  193,  192,  191,  188,  187,  186,  185,
      182,  181,  177,  178,  177,  176,  175,  170,  167,   56,

      165,  162,  155,  151,  150,  149,  148,   79,  134,   86,
       63,   61,   56,  691,    3,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691
    } ;

static yyconst flex_int16_t yy_chk[884] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    8,   18,
        8,   10,   10,   12,   23,   12,   12,   14,   14,   14,
       16,   16,   25,   17,   25,   12,   80,   22,   17,   19,
      617,   17,   19,   24,   18,   22,   80,   24,   19,   23,

       26,   12,   28,   26,   22,   29,   22,   29,   25,   17,
       29,   36,   12,   17,   30,   19,   17,   27,   19,  618,
       24,   27,   22,   19,   31,   27,   32,   26,   28,   22,
       31,   30,   29,   32,   48,   29,   35,   36,   33,   48,
       40,   32,   32,   35,   27,   33,   33,   40,   27,  619,
       37,   31,   27,   32,   37,   33,   31,   37,   39,   47,
       45,   39,   47,   35,   45,   49,   39,   32,   45,   51,
       35,   58,   33,   58,   62,   62,   51,   64,   64,   49,
       65,  555,   65,   65,   62,   66,   66,   64,   83,   66,
       66,   88,   65,  126,  126,   99,  143,   83,   88,  621,

       99,  128,  555,  161,  126,  143,  622,  126,   65,  623,
      128,   62,  161,  128,   64,  161,  624,  168,  168,   65,
       99,  168,  168,  171,  171,  172,  172,  173,  173,  172,
      172,  174,  174,  171,  269,  269,  270,  270,  271,  271,
      272,  272,  557,  579,  626,  627,  628,  629,  630,  631,
      632,  633,  635,  636,  637,  638,  639,  640,  641,  642,
      171,  643,  579,  557,  645,  646,  647,  648,  649,  650,
      651,  652,  653,  654,  655,  656,  657,  658,  659,  660,
      663,  664,  666,  667,  668,  669,  670,  671,  672,  673,
      674,  675,  676,  677,  678,  680,  681,  683,  684,  685,

      686,  688,  689,  692,  694,  692,  693,  693,  693,  695,
      695,  695,  696,  696,  696,  616,  615,  614,  613,  612,
      611,  610,  609,  606,  605,  604,  602,  601,  600,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  588,
      587,  586,  585,  584,  583,  582,  581,  580,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  556,
      554,  553,  552,  551,  550,  549,  548,  547,  546,  545,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  533,
      532,  531,  530,  529,  528,  526,  525,  524,  523,  522,

      521,  520,  519,  518,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
      500,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      488,  487,  486,  485,  484,  483,  482,  481,  480,  479,
      478,  477,  476,  475,  474,  473,  472,  471,  470,  469,
      468,  467,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  454,  453,  452,  450,  449,  447,
      446,  444,  443,  442,  441,  440,  439,  438,  437,  436,
      435,  434,  432,  431,  429,  428,  427,  426,  423,  422,
      421,  420,  419,  418,  417,  416,  415,  414,  413,  412,

      411,  410,  409,  408,  407,  406,  405,  404,  403,  402,
      401,  400,  399,  397,  396,  395,  393,  392,  391,  390,
      389,  387,  386,  385,  384,  383,  382,  380,  379,  378,
      377,  376,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  359,  358,  357,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  333,  332,  331,  330,  329,  328,  327,  326,  324,
      322,  321,  320,  319,  317,  316,  315,  314,  313,  312,
      311,  310,  309,  308,  307,  306,  305,  304,  303,  302,

      301,  300,  298,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  288,  286,  285,  284,  283,  282,  281,  280,
      278,  277,  276,  275,  274,  268,  267,  266,  265,  264,
      263,  262,  261,  260,  259,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  228,  227,  226,  225,  224,  223,
      222,  221,  220,  219,  218,  217,  216,  215,  214,  213,
      211,  209,  207,  206,  205,  204,  203,  202,  201,  200,
      199,  197,  196,  195,  194,  193,  191,  190,  189,  188,

      187,  186,  185,  184,  183,  182,  181,  180,  179,  178,
      176,  175,  169,  166,  165,  164,  163,  162,  160,  159,
      158,  157,  156,  155,  154,  153,  152,  151,  150,  149,
      148,  147,  146,  145,  144,  142,  141,  140,  139,  138,
      137,  136,  135,  134,  133,  132,  131,  130,  129,  127,
      125,  124,  123,  122,  121,  120,  119,  118,  117,  116,
      115,  114,  113,  112,  111,  110,  109,  108,  107,  106,
      105,  104,  103,  102,  101,  100,   98,   97,   96,   95,
       94,   93,   92,   91,   90,   89,   87,   86,   85,   84,
       82,   81,   78,   77,   76,   74,   67,   63,   61,   56,

       52,   50,   46,   44,   43,   42,   41,   38,   34,   20,
       11,    9,    5,    3,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int FtaParser_flex_debug;
int FtaParser_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *FtaParsertext;
#line 1 "fta.l"
/* ------------------------------------------------
Copyright 2020 AT&T Intellectual Property
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 ------------------------------------------- */
/*
	MUST COMPILE WITH
		flex -PFtaParser -oftalexer.cc fta.l
	(or equivalent).
*/	
#line 24 "fta.l"
/*
 * AT&T lex can't handle this lexer due to lex bugs.  It works with flex
 * 2.3.7, pclex 2.0.5, and MKS lex 3.1a.
 */

 #include "parse_fta.h"
 #include "parse_schema.h"
 #include <string.h>



#include "fta.tab.cc.h"

/*
	Some includes that flex doesn't include as standard,
	but which are needed.
*/

#include <stdlib.h>
#include <string.h>


//		Prevent flex from defining FtaParserwrap as extern "C" 

#define YY_SKIP_YYWRAP

/*		No lex lib, supply the FtaParserwrap fcn. that normally resides there
*/

//int FtaParserwrap(){return(1);}

extern int FtaParserdebug;


/*
		These variables are used for error reporting:
		flex_fta_lineno : the line currently being parsed when the error occurs.
		flex_fta_ch : the character on the line where the error occurs
		flex_fta_linebuf : store the line for reporting.

		NOTE : 1) the fixed size flex_fta_linebuf buffer is dangerous.
			   2) You might get pointed to a place shortly after
			 	  where the syntax error occurs.  It is close enough
				  for now.
*/

int flex_fta_lineno = 1;
int flex_fta_ch = 0;
char flex_fta_linebuf[200000];

char *flex_fta_stringinput = NULL;
int flex_fta_stringinput_ptr = 0;
FILE *flex_fta_fileinput = NULL;
int my_FtaParser_yyinput(char *buf, int max_size);



void FtaParsererror(char *s){
	int i;
	fprintf(stderr,"On line %d, char %d: %s (token %s):\n%s\n",
				flex_fta_lineno, flex_fta_ch, s, FtaParsertext, flex_fta_linebuf );
    for(i=0;i<flex_fta_ch;i++){
		if(flex_fta_linebuf[i] == '\t'){
			fprintf(stderr,"\t");
		}else{
			fprintf(stderr," ");
		}
	}
	fprintf(stderr,"^\n");
	//	fprintf(stderr,"%*s\n",1+flex_fta_ch,"^");
}

#undef YY_INPUT
#define YY_INPUT(b, r, ms) (r = my_FtaParser_yyinput(b,ms))

/* MKS needs the next line to increase the NFA table */
#line 1013 "ftalexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int FtaParserlex_destroy (void );

int FtaParserget_debug (void );

void FtaParserset_debug (int debug_flag  );

YY_EXTRA_TYPE FtaParserget_extra (void );

void FtaParserset_extra (YY_EXTRA_TYPE user_defined  );

FILE *FtaParserget_in (void );

void FtaParserset_in  (FILE * _in_str  );

FILE *FtaParserget_out (void );

void FtaParserset_out  (FILE * _out_str  );

yy_size_t FtaParserget_leng (void );

char *FtaParserget_text (void );

int FtaParserget_lineno (void );

void FtaParserset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int FtaParserwrap (void );
#else
extern int FtaParserwrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( FtaParsertext, FtaParserleng, 1, FtaParserout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( FtaParserin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( FtaParserin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, FtaParserin))==0 && ferror(FtaParserin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(FtaParserin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int FtaParserlex (void);

#define YY_DECL int FtaParserlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after FtaParsertext and FtaParserleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! FtaParserin )
			FtaParserin = stdin;

		if ( ! FtaParserout )
			FtaParserout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			FtaParserensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				FtaParser_create_buffer(FtaParserin,YY_BUF_SIZE );
		}

		FtaParser_load_buffer_state( );
		}

	{
#line 104 "fta.l"


	/* literal keyword tokens */

 /*
			The actions associated with each text token are to
			keep track of the current location (for syntax error reporting)
			and to report any necessary info to the emf.y parse tree builder

			Its likely that there are a number of omissions, inconsistencies
			(some keywords do not need to be in caps), and relics
			(keywords such as BETWEEN, INDICATOR, etc., are not used
			 in emf.y)
			This parser is somewhat of a work in progress.
 */

 /*		Query keywords		*/

#line 1250 "ftalexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of FtaParsertext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 692 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 815 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 122 "fta.l"
{ flex_fta_ch+=FtaParserleng; return AND; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 123 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup("AND_AGGR"); return AGGR; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 124 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup("OR_AGGR"); return AGGR; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 125 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup("XOR_AGGR"); return AGGR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 126 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup("AVG"); return AGGR; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 127 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup("MIN"); return AGGR; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 128 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup("MAX"); return AGGR; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 129 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup("SUM"); return AGGR; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 130 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup("COUNT"); return AGGR; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 131 "fta.l"
{ flex_fta_ch+=FtaParserleng; return BY; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 132 "fta.l"
{ flex_fta_ch+=FtaParserleng; return FROM; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 133 "fta.l"
{ flex_fta_ch+=FtaParserleng; return INNER_JOIN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 134 "fta.l"
{ flex_fta_ch+=FtaParserleng; return OUTER_JOIN; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 135 "fta.l"
{ flex_fta_ch+=FtaParserleng; return RIGHT_OUTER_JOIN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 136 "fta.l"
{ flex_fta_ch+=FtaParserleng; return LEFT_OUTER_JOIN; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 137 "fta.l"
{ flex_fta_ch+=FtaParserleng; return WATCHLIST_JOIN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "fta.l"
{ flex_fta_ch+=FtaParserleng; return FILTER_JOIN; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 139 "fta.l"
{ flex_fta_ch+=FtaParserleng; return GROUP; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 140 "fta.l"
{ flex_fta_ch+=FtaParserleng; return ROLLUP; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 141 "fta.l"
{ flex_fta_ch+=FtaParserleng; return CUBE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 142 "fta.l"
{ flex_fta_ch+=FtaParserleng; return GROUPING_SETS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 143 "fta.l"
{ flex_fta_ch+=FtaParserleng; return SUPERGROUP; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 144 "fta.l"
{ flex_fta_ch+=FtaParserleng; return CLEANING_WHEN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 145 "fta.l"
{ flex_fta_ch+=FtaParserleng; return CLEANING_BY; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 146 "fta.l"
{ flex_fta_ch+=FtaParserleng; return CLOSING_WHEN; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 147 "fta.l"
{ flex_fta_ch+=FtaParserleng; return HAVING; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 148 "fta.l"
{ flex_fta_ch+=FtaParserleng; return AS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 149 "fta.l"
{ flex_fta_ch+=FtaParserleng; return IN; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 150 "fta.l"
{ flex_fta_ch+=FtaParserleng; return NOT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 151 "fta.l"
{ flex_fta_ch+=FtaParserleng; return OR; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 153 "fta.l"
{ flex_fta_ch+=FtaParserleng; return SELECT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 154 "fta.l"
{ flex_fta_ch+=FtaParserleng; return WHERE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 155 "fta.l"
{ flex_fta_ch+=FtaParserleng; return SUCH;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 156 "fta.l"
{ flex_fta_ch+=FtaParserleng; return THAT;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 157 "fta.l"
{flex_fta_ch+=FtaParserleng; return MERGE;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 158 "fta.l"
{flex_fta_ch+=FtaParserleng; return SLACK;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 159 "fta.l"
{flex_fta_ch+=FtaParserleng; return WATCHLIST;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 161 "fta.l"
{ flex_fta_ch+=FtaParserleng; return TRUE_V;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 162 "fta.l"
{ flex_fta_ch+=FtaParserleng; return FALSE_V;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 163 "fta.l"
{ flex_fta_ch+=FtaParserleng; return TIMEVAL_L;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 164 "fta.l"
{ flex_fta_ch+=FtaParserleng; return HEX_L;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 165 "fta.l"
{ flex_fta_ch+=FtaParserleng; return LHEX_L;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 166 "fta.l"
{ flex_fta_ch+=FtaParserleng; return IP_L;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 167 "fta.l"
{ flex_fta_ch+=FtaParserleng; return IPV6_L;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 169 "fta.l"
{ flex_fta_ch+=FtaParserleng; return DEFINE_SEC;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 170 "fta.l"
{ flex_fta_ch+=FtaParserleng; return PARAM_SEC;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 172 "fta.l"
{flex_fta_ch+=FtaParserleng; return LEFTBRACE;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 173 "fta.l"
{flex_fta_ch+=FtaParserleng; return RIGHTBRACE;}
	YY_BREAK
/*
		Table definition keywords
 */		
case 49:
YY_RULE_SETUP
#line 178 "fta.l"
{ flex_fta_ch+=FtaParserleng; return TABLE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 179 "fta.l"
{ flex_fta_ch+=FtaParserleng; return PROTOCOL; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 180 "fta.l"
{ flex_fta_ch+=FtaParserleng; return STREAM; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 181 "fta.l"
{ flex_fta_ch+=FtaParserleng; return FTA; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 182 "fta.l"
{ flex_fta_ch+=FtaParserleng; return UNPACK_FCNS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 184 "fta.l"
{ flex_fta_ch+=FtaParserleng; return OPERATOR; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 185 "fta.l"
{ flex_fta_ch+=FtaParserleng; return OPERATOR_VIEW; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 186 "fta.l"
{ flex_fta_ch+=FtaParserleng; return FIELDS; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 187 "fta.l"
{ flex_fta_ch+=FtaParserleng; return SUBQUERIES; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 188 "fta.l"
{ flex_fta_ch+=FtaParserleng; return SELECTION_PUSHDOWN; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 189 "fta.l"
{flex_fta_ch+=FtaParserleng; return SEMICOLON;}
	YY_BREAK
/* punctuation */
case 60:
#line 194 "fta.l"
case 61:
YY_RULE_SETUP
#line 194 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup(FtaParsertext); return SHIFT_OP; }
	YY_BREAK
case 62:
#line 197 "fta.l"
case 63:
#line 198 "fta.l"
case 64:
#line 199 "fta.l"
case 65:
#line 200 "fta.l"
case 66:
#line 201 "fta.l"
case 67:
YY_RULE_SETUP
#line 201 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup(FtaParsertext); return COMPARISON; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 203 "fta.l"
{ flex_fta_ch+=FtaParserleng; return FtaParsertext[0]; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 204 "fta.l"
{ flex_fta_ch+=FtaParserleng; return FtaParsertext[0]; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 205 "fta.l"
{ flex_fta_ch+=FtaParserleng; return FtaParsertext[0]; }
	YY_BREAK
/* names */
case 71:
YY_RULE_SETUP
#line 209 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup(FtaParsertext); return NAME; }
	YY_BREAK
/* numbers */
case 72:
#line 214 "fta.l"
case 73:
YY_RULE_SETUP
#line 214 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup(FtaParsertext);  return INTNUM; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 216 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup(FtaParsertext);  return LONGINTNUM; }
	YY_BREAK
case 75:
#line 219 "fta.l"
case 76:
#line 220 "fta.l"
case 77:
#line 221 "fta.l"
case 78:
#line 222 "fta.l"
case 79:
YY_RULE_SETUP
#line 222 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParserlval.strval = strdup(FtaParsertext); return APPROXNUM; }
	YY_BREAK
/* strings */
case 80:
YY_RULE_SETUP
#line 226 "fta.l"
{
		
		int c;
		
		FtaParserlval.strval = strdup(FtaParsertext+1); 

		c = yyinput();

		unput(c);	/* just peeking */
		if(c != '\'') {
			flex_fta_ch+=FtaParserleng; 
			FtaParserlval.strval[FtaParserleng-2] = '\0';
			return STRING_TOKEN;
		} else
			yymore();
	}
	YY_BREAK
case 81:
*yy_cp = (yy_hold_char); /* undo effects of setting up FtaParsertext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up FtaParsertext again */
YY_RULE_SETUP
#line 243 "fta.l"
{ flex_fta_ch+=FtaParserleng; FtaParsererror("Unterminated string"); }
	YY_BREAK
/*															*/
/*		Newline : advance the error reporting line number	*/
/*		and grab the next line into flex_fta_linebuf			*/
/*															*/
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 250 "fta.l"
{flex_fta_ch=0; flex_fta_lineno++;
			   strcpy(flex_fta_linebuf,FtaParsertext+1);
			   yyless(1);
			   }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 255 "fta.l"
{flex_fta_ch+=FtaParserleng; }	/* white space */
	YY_BREAK
case 84:
*yy_cp = (yy_hold_char); /* undo effects of setting up FtaParsertext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up FtaParsertext again */
YY_RULE_SETUP
#line 257 "fta.l"
{flex_fta_ch+=FtaParserleng; };	/* comment */
	YY_BREAK
case 85:
*yy_cp = (yy_hold_char); /* undo effects of setting up FtaParsertext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up FtaParsertext again */
YY_RULE_SETUP
#line 258 "fta.l"
{flex_fta_ch+=FtaParserleng; };	/* comment */
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 260 "fta.l"
{flex_fta_ch+=FtaParserleng; fprintf(stderr,"Warning: unknown token (ignored)\n");  FtaParsererror(FtaParsertext);}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 262 "fta.l"
ECHO;
	YY_BREAK
#line 1755 "ftalexer.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed FtaParserin at a new source and called
			 * FtaParserlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = FtaParserin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( FtaParserwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * FtaParsertext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of FtaParserlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					FtaParserrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			FtaParserrestart(FtaParserin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) FtaParserrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 692 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 692 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 691);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up FtaParsertext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					FtaParserrestart(FtaParserin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( FtaParserwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve FtaParsertext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void FtaParserrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        FtaParserensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            FtaParser_create_buffer(FtaParserin,YY_BUF_SIZE );
	}

	FtaParser_init_buffer(YY_CURRENT_BUFFER,input_file );
	FtaParser_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void FtaParser_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		FtaParserpop_buffer_state();
	 *		FtaParserpush_buffer_state(new_buffer);
     */
	FtaParserensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	FtaParser_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (FtaParserwrap()) processing, but the only time this flag
	 * is looked at is after FtaParserwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void FtaParser_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	FtaParserin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE FtaParser_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) FtaParseralloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in FtaParser_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) FtaParseralloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in FtaParser_create_buffer()" );

	b->yy_is_our_buffer = 1;

	FtaParser_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with FtaParser_create_buffer()
 * 
 */
    void FtaParser_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		FtaParserfree((void *) b->yy_ch_buf  );

	FtaParserfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a FtaParserrestart() or at EOF.
 */
    static void FtaParser_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	FtaParser_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then FtaParser_init_buffer was _probably_
     * called from FtaParserrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void FtaParser_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		FtaParser_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void FtaParserpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	FtaParserensure_buffer_stack();

	/* This block is copied from FtaParser_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from FtaParser_switch_to_buffer. */
	FtaParser_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void FtaParserpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	FtaParser_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		FtaParser_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void FtaParserensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)FtaParseralloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in FtaParserensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)FtaParserrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in FtaParserensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE FtaParser_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) FtaParseralloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in FtaParser_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	FtaParser_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to FtaParserlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       FtaParser_scan_bytes() instead.
 */
YY_BUFFER_STATE FtaParser_scan_string (yyconst char * yystr )
{
    
	return FtaParser_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to FtaParserlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE FtaParser_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) FtaParseralloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in FtaParser_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = FtaParser_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in FtaParser_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up FtaParsertext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		FtaParsertext[FtaParserleng] = (yy_hold_char); \
		(yy_c_buf_p) = FtaParsertext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		FtaParserleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int FtaParserget_lineno  (void)
{
        
    return FtaParserlineno;
}

/** Get the input stream.
 * 
 */
FILE *FtaParserget_in  (void)
{
        return FtaParserin;
}

/** Get the output stream.
 * 
 */
FILE *FtaParserget_out  (void)
{
        return FtaParserout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t FtaParserget_leng  (void)
{
        return FtaParserleng;
}

/** Get the current token.
 * 
 */

char *FtaParserget_text  (void)
{
        return FtaParsertext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void FtaParserset_lineno (int  _line_number )
{
    
    FtaParserlineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see FtaParser_switch_to_buffer
 */
void FtaParserset_in (FILE *  _in_str )
{
        FtaParserin = _in_str ;
}

void FtaParserset_out (FILE *  _out_str )
{
        FtaParserout = _out_str ;
}

int FtaParserget_debug  (void)
{
        return FtaParser_flex_debug;
}

void FtaParserset_debug (int  _bdebug )
{
        FtaParser_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from FtaParserlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    FtaParserin = stdin;
    FtaParserout = stdout;
#else
    FtaParserin = (FILE *) 0;
    FtaParserout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * FtaParserlex_init()
     */
    return 0;
}

/* FtaParserlex_destroy is for both reentrant and non-reentrant scanners. */
int FtaParserlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		FtaParser_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		FtaParserpop_buffer_state();
	}

	/* Destroy the stack itself. */
	FtaParserfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * FtaParserlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *FtaParseralloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *FtaParserrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void FtaParserfree (void * ptr )
{
			free( (char *) ptr );	/* see FtaParserrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 262 "fta.l"



int my_FtaParser_yyinput(char *buf, int max_size){
	int c = 0;
	int inchar = 0;
	
	if(flex_fta_stringinput != NULL){
		while(c<max_size){
			if(flex_fta_stringinput[flex_fta_stringinput_ptr] != '\0'){
				buf[c++] = flex_fta_stringinput[flex_fta_stringinput_ptr++];
			}else{
				break;
			}
		}
		return(c);
	}
	
	if(flex_fta_fileinput != NULL){
		while(c < max_size){
			inchar = getc(flex_fta_fileinput);
			if(inchar != EOF){
				buf[c++] = inchar;
			}else{
				break;
			}
		}
		return(c);
	}
	
	return(0);
}

void FtaParser_setfileinput(FILE *f){
	FtaParserrestart(NULL);

	flex_fta_fileinput = f;
	flex_fta_stringinput = NULL;
	flex_fta_lineno = 1;
	flex_fta_ch = 0;
}

void FtaParser_setstringinput(char *s){
	FtaParserrestart(NULL);

	flex_fta_fileinput = NULL;
	flex_fta_stringinput = s;
	flex_fta_stringinput_ptr = 0;
	flex_fta_lineno = 1;
	flex_fta_ch = 0;
}
	
		



